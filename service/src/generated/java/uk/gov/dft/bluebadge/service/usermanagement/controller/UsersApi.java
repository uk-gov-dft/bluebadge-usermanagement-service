/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package uk.gov.dft.bluebadge.service.usermanagement.controller;

import uk.gov.dft.bluebadge.model.usermanagement.CommonResponse;
import uk.gov.dft.bluebadge.model.usermanagement.Error;
import uk.gov.dft.bluebadge.model.usermanagement.User;
import uk.gov.dft.bluebadge.model.usermanagement.UserResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;

@Api(value = "Users", description = "the Users API")
public interface UsersApi {

    UsersApiDelegate getDelegate();

    @ApiOperation(value = "List of all Users", nickname = "authoritiesAuthorityIdUsersGet", notes = "Returns a list of Users ", response = User.class, responseContainer = "List", tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "An array of users", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "Unexpected error", response = Error.class) })
    @RequestMapping(value = "/authorities/{authorityId}/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<User>> authoritiesAuthorityIdUsersGet(@ApiParam(value = "ID of the authority.",required=true) @PathVariable("authorityId") Integer authorityId) {
        return getDelegate().authoritiesAuthorityIdUsersGet(authorityId);
    }


    @ApiOperation(value = "Create a user", nickname = "authoritiesAuthorityIdUsersPost", notes = "Create a user", response = UserResponse.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponse.class) })
    @RequestMapping(value = "/authorities/{authorityId}/users",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<UserResponse> authoritiesAuthorityIdUsersPost(@ApiParam(value = "ID of the authority.",required=true) @PathVariable("authorityId") Integer authorityId,@ApiParam(value = ""  )  @Valid @RequestBody User user) {
        return getDelegate().authoritiesAuthorityIdUsersPost(authorityId, user);
    }


    @ApiOperation(value = "Removes a User from a Local Authority", nickname = "authoritiesAuthorityIdUsersUserIdDelete", notes = "Removes a User from a Local Authority", tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Resource Successfully Removed"),
        @ApiResponse(code = 404, message = "Resource Not Found", response = CommonResponse.class) })
    @RequestMapping(value = "/authorities/{authorityId}/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> authoritiesAuthorityIdUsersUserIdDelete(@ApiParam(value = "ID of the authority.",required=true) @PathVariable("authorityId") Integer authorityId,@ApiParam(value = "Numeric ID of the user to get.",required=true) @PathVariable("userId") Integer userId) {
        return getDelegate().authoritiesAuthorityIdUsersUserIdDelete(authorityId, userId);
    }


    @ApiOperation(value = "Retrieve a specific user", nickname = "authoritiesAuthorityIdUsersUserIdGet", notes = "Retrieve a user and their roles", response = UserResponse.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserResponse.class) })
    @RequestMapping(value = "/authorities/{authorityId}/users/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserResponse> authoritiesAuthorityIdUsersUserIdGet(@ApiParam(value = "ID of the authority.",required=true) @PathVariable("authorityId") Integer authorityId,@ApiParam(value = "Numeric ID of the user to get.",required=true) @PathVariable("userId") Integer userId) {
        return getDelegate().authoritiesAuthorityIdUsersUserIdGet(authorityId, userId);
    }

}
