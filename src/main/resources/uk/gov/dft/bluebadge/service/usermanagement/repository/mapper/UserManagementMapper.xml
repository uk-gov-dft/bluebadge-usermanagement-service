<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="uk.gov.dft.bluebadge.service.usermanagement.repository.mapper.UserManagementMapper">

    <resultMap id="userMap" type="UserEntity">
        <result property="uuid"  column="uuid"
                typeHandler="uk.gov.dft.bluebadge.common.repository.UuidTypeHandler"/>
        <result property="userId"    column="userId"     />
        <result property="name" column="name" />
        <result property="localAuthorityId" column="localAuthorityId" />
        <result property="roleId" column="roleId" />
        <result property="roleName" column="roleName" />
    </resultMap>

    <select id="retrieveUserById" resultMap="userMap" parameterType="RetrieveUserByIdParams">
        SELECT u.user_uuid AS uuid
            , u.id AS userId
            , u.name
            , u.local_authority_short_code AS localAuthorityId
            , u.email_address AS emailAddress
            , u.role_id AS roleId
            , r.description AS roleName
        FROM users u
        INNER JOIN roles r ON u.role_id = r.id
        WHERE u.user_uuid = #{userId,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler}
        <if test="localAuthority != null">
            AND u.local_authority_short_code = #{localAuthority}
        </if>
    </select>

    <select id="findUsers" resultType="UserEntity" parameterType="UserEntity">
        SELECT u.id, u.name
            , u.local_authority_short_code AS localAuthorityId
            , u.email_address AS emailAddress
            , u.role_id AS roleId
            , r.description AS roleName
        FROM users u
        INNER JOIN roles r ON u.role_id = r.id
        <where>
            <if test="localAuthorityId != null">
                AND u.local_authority_short_code = #{localAuthorityId}
            </if>
            <if test="name != null">
              AND (UPPER(u.name) LIKE UPPER(#{name}) OR UPPER(u.email_address)
                LIKE UPPER(#{emailAddress}))
            </if>
        </where>
        ORDER BY u.name ASC
        LIMIT 50
    </select>

    <select id="emailAddressAlreadyUsed" resultType="boolean" parameterType="UserEntity">
        SELECT EXISTS(
          SELECT 1 FROM users
          WHERE UPPER(email_address) = UPPER(#{emailAddress})
          <if test="uuid != null">
              AND user_uuid != #{userUuid,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler}
          </if>
        )
    </select>

    <update id="updateUser" parameterType="UserEntity">
        UPDATE users
        SET
            name = #{name}
            , email_address = #{emailAddress}
            , local_authority_short_code = #{localAuthorityId}
            , role_id = #{roleId}
        WHERE user_uuid = #{uuid,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler}
    </update>

    <resultMap id="emailLinkMap" type="EmailLink">
        <result property="userUuid"  column="userUuid"
                typeHandler="uk.gov.dft.bluebadge.common.repository.UuidTypeHandler"/>
        <result property="isActive"    column="isActive"     />
        <result property="uuid" column="uuid" />
    </resultMap>

    <select id="retrieveEmailLinkWithUuid" parameterType="String" resultMap="emailLinkMap">
        SELECT u.user_uuid AS userUuid,
        el.is_active AS isActive,
        el.uuid
        FROM email_link el INNER JOIN users u ON el.user_id = u.id
        WHERE el.uuid = #{uuid}
    </select>

    <update id="updateEmailLinkToInvalid" parameterType="String">
        UPDATE email_link SET is_active = false WHERE uuid = #{uuid}
    </update>

    <update id="updateUserToInactive" parameterType="UuidAuthorityCodeParams">
        UPDATE users SET is_active = false WHERE user_uuid =
        #{uuid,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler}
    </update>

    <insert id="createEmailLink" parameterType="EmailLink">
        INSERT INTO email_link
          (user_id, uuid)
        VALUES
          ((SELECT id FROM users WHERE user_uuid =
            #{userUuid,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler})
          , #{uuid})
    </insert>

    <update id="updatePassword" parameterType="UserEntity">
        UPDATE users
        SET
        password = #{password}
        , is_active = true
        WHERE user_uuid = #{uuid,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler}
    </update>

    <select id="retrieveUserUsingEmailLinkUuid" parameterType="String" resultType="UserEntity">
        SELECT u.id, u.name
            , u.local_authority_short_code AS localAuthorityId
            , u.email_address AS emailAddress
            , u.role_id AS roleId
            , r.description AS roleName
        FROM users u
        INNER JOIN email_link e ON u.id = e.user_id
        INNER JOIN roles r ON u.role_id = r.id
        WHERE e.uuid = #{uuid}
    </select>

    <insert id="createUser" parameterType="UserEntity"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO users (name, local_authority_short_code, email_address, role_id, password, user_uuid)
        VALUES (#{name}, #{localAuthorityId}, #{emailAddress}, #{roleId}, #{password}
        , #{uuid,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler})
    </insert>

    <delete id="deleteUser" parameterType="DeleteUserParams">
        DELETE FROM users
        WHERE user_uuid = #{userUuid,javaType=java.util.UUID,jdbcType=OTHER,typeHandler=uk.gov.dft.bluebadge.common.repository.UuidTypeHandler}
        <if test="localAuthority != null">
            AND local_authority_short_code = #{localAuthority}
        </if>
    </delete>

</mapper>
