<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="uk.gov.dft.bluebadge.service.usermanagement.repository.mapper.UserManagementMapper">
    <select id="retrieveUserById" resultType="UserEntity" parameterType="RetrieveUserByIdParams">
        SELECT u.id, u.name
            , u.local_authority_id AS localAuthorityId
            , u.email_address AS emailAddress
            , u.role_id AS roleId
            , r.description AS roleName
        FROM users u
        INNER JOIN roles r ON u.role_id = r.id
        WHERE u.id = #{userId}
        <if test="localAuthority != null">
            AND u.local_authority_id = #{localAuthority}
        </if>
    </select>

    <select id="findUsers" resultType="UserEntity" parameterType="UserEntity">
        SELECT u.id, u.name
            , u.local_authority_id AS localAuthorityId
            , u.email_address AS emailAddress
            , u.role_id AS roleId
            , r.description AS roleName
        FROM users u
        INNER JOIN roles r ON u.role_id = r.id
        <where>
            <if test="localAuthorityId != null">
                AND u.local_authority_id = #{localAuthorityId}
            </if>
            <if test="name != null">
              AND (UPPER(u.name) LIKE UPPER(#{name}) OR UPPER(u.email_address)
                LIKE UPPER(#{emailAddress}))
            </if>
        </where>
        ORDER BY u.name ASC
        LIMIT 50
    </select>

    <select id="emailAddressAlreadyUsed" resultType="boolean" parameterType="UserEntity">
        SELECT EXISTS(
          SELECT 1 FROM users
          WHERE UPPER(email_address) = UPPER(#{emailAddress})
          <if test="id != null">
              AND id != #{id}
          </if>
        )
    </select>

    <update id="updateUser" parameterType="UserEntity">
        UPDATE users
        SET
            name = #{name}
            , email_address = #{emailAddress}
            , local_authority_id = #{localAuthorityId}
            , role_id = #{roleId}
        WHERE id = #{id}
    </update>

    <select id="retrieveEmailLinkWithUuid" parameterType="String" resultType="EmailLink">
        SELECT user_id AS userId,
        is_active AS isActive,
        uuid
        FROM email_link
        WHERE uuid = #{uuid}
    </select>

    <update id="updateEmailLinkToInvalid" parameterType="String">
        UPDATE email_link SET is_active = false WHERE uuid = #{uuid}
    </update>

    <update id="updateUserToInactive" parameterType="Integer">
        UPDATE users SET is_active = false WHERE id = #{id}
    </update>

    <insert id="createEmailLink" parameterType="EmailLink">
        INSERT INTO email_link
          (user_id, uuid)
        VALUES
          (#{userId}, #{uuid})
    </insert>

    <update id="updatePassword" parameterType="UserEntity">
        UPDATE users
        SET
        password = #{password}
        , is_active = true
        WHERE id = #{id}
    </update>

    <select id="retrieveUserUsingEmailLinkUuid" parameterType="String" resultType="UserEntity">
        SELECT u.id, u.name
            , u.local_authority_id AS localAuthorityId
            , u.email_address AS emailAddress
            , u.role_id AS roleId
            , r.description AS roleName
        FROM users u
        INNER JOIN email_link e ON u.id = e.user_id
        INNER JOIN roles r ON u.role_id = r.id
        WHERE e.uuid = #{uuid}
    </select>

    <insert id="createUser" parameterType="UserEntity"
            useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO users (name, local_authority_id, email_address, role_id, password)
        VALUES (#{name}, #{localAuthorityId}, #{emailAddress}, #{roleId}, #{password})
    </insert>

    <delete id="deleteUser" parameterType="DeleteUserParams">
        DELETE FROM users
        WHERE id = #{userId}
        <if test="localAuthority != null">
            AND local_authority_id = #{localAuthority}
        </if>
    </delete>

</mapper>
